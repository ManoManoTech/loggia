{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Intro","text":""},{"location":"#loggia","title":"Loggia","text":"<p>The documentation is available on Github Pages</p> <p>Read it online</p>"},{"location":"#objective","title":"Objective","text":"<p>The objective of this package is to provide a simple and standard way to configure logging in Python applications, using the standard <code>logging</code> module, and compatible with loguru.</p> <p>We aim for a batteries-included, no configuration required, delightful out-of-the box experience.</p> <p>The bundled configuration is opinionated and suits our purposes well, but we recognize your opinion will differ and provide various mechanisms of increasing complexity to tune logging to your liking.</p> <p>Loggia is not a new Python logger - it's a nice way to configure - and share configuration - for Python's standard logging and as well as loguru.</p> <p>Warning</p> <p>While this package is in an early 0.x release, it's built upon years of development and production usage in various projects.</p> <p>Loggia as a logging configuration bundle is young, but the configuration itself is what we most enjoyed working with for some time now.</p>"},{"location":"#usage","title":"Usage","text":"<ol> <li>Add the <code>loggia</code> dependency to your project, e.g.: with PDM:<ul> <li>Directly from Pypi: <code>pdm add loggia</code></li> <li>With Git: <code>pdm add \"loggia @ git+ssh://git@github.com/manomanotech/loggia.git\"</code></li> </ul> </li> <li><code>from loggia.logger import initialize; initialize()</code> is a strong starting point<ul> <li>You should call this as early as possible in your application, ideally before any other code is run, for instance by adding it in your main <code>__init__.py</code> file.</li> </ul> </li> <li>Read the Usage docs should you need to tune things.</li> </ol>"},{"location":"#features","title":"Features","text":"<ul> <li>Delightful standard logging configuration in <code>pretty</code> or <code>structured</code> mode</li> <li>Compatibility with <code>loguru</code> (WIP) - you can keep using Loguru's API as much as you like or need it, while Loggia takes care of all the other standard-logging based loggers.</li> <li>Configuring <code>sys.excepthook</code> to properly log uncaught exceptions</li> <li>Using <code>logging.captureWarnings</code> to log warnings</li> <li>Configuring the standard logger and loguru to use the same handlers</li> <li>Only one non-optional dependency</li> </ul>"},{"location":"#code-standards-principles","title":"Code standards &amp; Principles","text":"<ul> <li>Lean towards being way too typed rather than untyped</li> <li>Do not depend on third-party packages (WIP)</li> <li>Do not crash unless explicitly asked to - fallback to sensible things, emit a warning, and move on.</li> </ul>"},{"location":"#supported-versions","title":"Supported versions","text":"<p>We currently support Python 3.9, 3.10, 3.11 and 3.12.</p> <p>We may drop the support for a Python version before its end of life, to keep the codebase up to date with the latest Python features: i.e.: we will endeavor to support either the last 3 or 4 stable Python releases.</p> <p>We don't plan to support earlier versions or different runtimes.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#changelog","title":"Changelog","text":"<p>For a list of planned features, see the roadmap.</p>"},{"location":"CHANGELOG/#unreleased","title":"Unreleased","text":"<ul> <li>CHANGED <code>LOGGIA_SUB_LEVEL</code> and set_logger_level now accept a lowercase strings and ints as well as uppercase strings.</li> <li>FIXED <code>ddtrace</code> was imported even with <code>DD_TRACE_ENABLED=false</code></li> </ul>"},{"location":"CHANGELOG/#030-2024-01-22","title":"0.3.0 - 2024-01-22","text":"<p>Initial Open Source Release!</p> <p>In this release, we mostly focus on adoption blockers and seriously itchy behavior. The goal remains to have a delightful out-of-the-box experience with little to no config required.</p> <ul> <li>BREAKING CHANGE <code>conf.add_log_filter()</code> has a simpler and safer signature that   abstracts away details from the underlying logging dictconfig implementation. You can   now either pass an instance of something that implements a filter method, or a callable,   both with the same <code>[[LogRecord], bool]</code> signature.</li> <li>ADDED Python 3.12 support and updated dependencies</li> <li>CHANGED Default <code>sys.excepthook</code> is now set in the <code>prod</code> preset. It previously explicitly   required an opt-in.</li> <li>ADDED Support for instrumenting <code>sys.unraisablehook</code> and <code>threading.excepthook</code>. Both are   enabled by default in the <code>prod</code> preset, similarly to <code>sys.excepthook</code>. This allows   library users to configure the solution of their choice in development for exception   pretty printing, and stays out of the way of IPython.</li> <li>FIXED Log <code>extra_args</code> containing the <code>%</code> sign are now correctly rendered in pretty mode.</li> <li>CHANGED Propagation shenanigans and handler demultiplication have been removed. This change   should not impact any use-cases we're aware of. It was required by the next item.</li> <li>ADDED <code>conf.add_default_handler_filter()</code>, the preferred way to add a filter that applies to   all loggers with propagation on.</li> <li>CHANGED Loguru reconfiguration blocker is now configurable, defaults to false (disabled),   and is turned on in the <code>dev</code> preset.</li> </ul> <p>Friendly reminder that fully intend on making breaking changes until 1.0 ships.</p>"},{"location":"CHANGELOG/#020-2023-09-26","title":"0.2.0 - 2023-09-26","text":"<p>In this release we stabilize and do a few breaking changes to better the quality of the lib. We expand on the core capabilities offered by 0.1</p> <ul> <li><code>LOGGIA_CAPTURE_LOGURU</code> now defaults to <code>AUTO</code> and will not display an       error if loguru is not available. Setting it to <code>ENABLED</code> will display an       error if loguru is not available. Setting it to <code>DISABLED</code> will skip       loading and configuring loguru entirely.</li> <li><code>import loggia.auto</code> is new syntactic sugar for the common       <code>import loggia.logger; loggia.logger.initialize()</code></li> <li>BREAKING CHANGE: Preset preferences are now written in <code>snake_case</code> instead       of <code>fulllowercase</code>. This will only affect adventurous custom preset authors.</li> <li>The above two changes bring the library in line with its documentation.</li> <li>Pretty Formatter: hide extra args that are formatted (@jonathan.gallon)</li> <li>Fix loguru exception handling</li> <li>Load preset through FQN in <code>LOGGIA_PRESETS</code></li> <li>Write built-in preset override tests</li> </ul>"},{"location":"CHANGELOG/#013-2023-09-07","title":"0.1.3 - 2023-09-07","text":"<ul> <li>Default log level for <code>Prod</code> preset is now <code>INFO</code> instead of <code>DEBUG</code></li> <li>Expand supported Python version: we now support Python 3.9, 3.10 and 3.11<ul> <li>We still recommend using Python 3.11 for the best experience</li> </ul> </li> <li>Fixed errors when <code>loguru</code> is not installed<ul> <li>We now test with <code>loguru</code> installed and not installed</li> </ul> </li> <li>Fixed crash when <code>ddtrace</code> is not installed</li> <li>We now use <code>pdm-backend</code> instead of <code>hatchling</code> for packaging</li> <li>Misc. documentation and quality improvements</li> </ul>"},{"location":"CHANGELOG/#012-2023-08-24","title":"0.1.2 - 2023-08-24","text":"<ul> <li>Fixed environment variable <code>LOGGIA_PRESETS</code> that was ignored if <code>presets</code> was passed to the LoggerConfiguration constructor</li> <li>Improved docs, with all options documented and other minor improvements</li> <li>Fixed <code>extra</code> values KVs not being shown for <code>pretty</code> mode</li> <li>Allow booleans to configure bool options, instead of only truthy strings</li> <li>Fixed general log level not properly parsed if passed as a non-uppercase string or a number</li> <li>Trace and success level are now only supported if loguru capture is enabled, even for standard logging</li> </ul>"},{"location":"CHANGELOG/#011-2023-08-22","title":"0.1.1 - 2023-08-22","text":"<ul> <li>Fix linting, typo and doc issues</li> </ul>"},{"location":"CHANGELOG/#010-2023-08-21","title":"0.1.0 - 2023-08-21","text":"<p>This initial release is a repackaging of ~2 years of various internal logger configurations in various states of maintenance (disrepair?) and materializes what we believe are best practices for Python standard logging and loguru.</p> <ul> <li>Properly configured standard logger either in <code>pretty</code> or <code>structured</code> mode</li> <li>Basic interop. with <code>loguru</code>, with <code>loguru</code> piping into standard logger</li> <li>First class support for Datadog standard log attributes</li> <li>Preliminary concept of presets</li> <li>Most of the code shown in documentation is derived from the test suite</li> <li>Move Datadog-specific reencoding into a dedicated filter</li> <li>Move hypercorn/gunicorn reencoding into a dedicated filter</li> <li><code>dev</code> and <code>prod</code> presets in the <code>main</code> slot</li> <li>Rename internals to have legible documentation</li> <li>Clean up mkdocs settings for the reference part</li> <li>Write preset tests</li> <li>(MM-Internal) Artifactory release</li> </ul>"},{"location":"ROADMAP/","title":"Roadmap","text":""},{"location":"ROADMAP/#roadmap","title":"ROADMAP","text":"<p>For a list of past changes, see the changelog.</p>"},{"location":"ROADMAP/#next-release","title":"Next release","text":"<ul> <li>See CHANGELOG.md</li> <li>(And more! Let us know what you'd like next.)</li> </ul>"},{"location":"ROADMAP/#later-or-sooner","title":"Later (or sooner)","text":""},{"location":"ROADMAP/#more-ways-of-using-loggia","title":"More ways of using Loggia","text":"<ul> <li><code>python -m loggia.auto -m mypackage</code> for non-intrusive logger reconfiguration</li> </ul>"},{"location":"ROADMAP/#make-loggia-more-delightful","title":"Make Loggia more delightful","text":"<ul> <li>Pre-logger for errors detecting while configuring Loggia</li> <li>Provide better error messages before calling <code>logging.dictConfig</code></li> <li>Preset auto-activation based on feature/package detection</li> <li>Provide type stubs that help language servers recognize extensions to the logger</li> <li>Document and test <code>__json__</code> on our bundled <code>CustomJSONEncoder</code></li> <li>Right types for Python LoggerConfiguration constructor and methods (bool and int support, not just str...)</li> <li>Good story for users to test their configuration (pytest config?)</li> <li>Capture ANSI output in usage tests, render it with <code>ansi2html</code> and include it in the documentation</li> <li>Reorganize packages so that <code>from loggia import logger</code> produces a valid logger a la loguru, with implicit initialize if need be</li> </ul>"},{"location":"ROADMAP/#make-loggia-more-configurable","title":"Make Loggia more configurable","text":"<ul> <li>Support more conditional extensions and knobs for the pretty formatter<ul> <li>Specific datetime format</li> <li>Optionally add thread id</li> <li>Optionally add process id</li> <li>Provide different palettes for the pretty formatter (ACCESSIBILITY)</li> <li>Hide some KVs from messages</li> <li>Optionally quoted strings to distinguish between e.g. 1 and \"1\"</li> </ul> </li> <li>Support more and more custom things in our bundled JSONEncoder</li> <li>Support for user-injected filters either on the general handler or on some specific logger</li> <li>Support faster JSON encoders like <code>msgspec</code>, <code>orjson</code> and <code>ujson</code> when detected</li> <li>Allow custom formatters to be loaded via fully qualified names</li> <li>Allow custom presets to be loaded via fully qualified names</li> <li>Make environment variable parsing type aware and document it</li> <li>Stronger KV support globally or per-logger<ul> <li>Through a general filter</li> <li>Strip some KVs from messages</li> </ul> </li> <li>Support <code>LOGGIA_NO_PRESETS</code> to explicitely bar some presets from being enabled.</li> </ul>"},{"location":"ROADMAP/#make-loggia-handle-more-concerns","title":"Make Loggia handle more concerns","text":"<ul> <li>Integration with better_exceptions and rich exception display</li> <li>Interop with structlog?</li> <li>Hook SIGUSR1 or SIGUSR2 and dump logger status. Useful to discover live loggers   that are possibly hidden behind the log level. Default False, turned on in Dev   profile.</li> </ul>"},{"location":"ROADMAP/#more-of-pythons-internals-exposed","title":"More of Python's internals exposed","text":"<ul> <li>Make our standard hooks <code>sys.excepthook</code> compatible with other hooks instead of basic override</li> <li>audit subsystem interop</li> </ul>"},{"location":"ROADMAP/#more-delightful-built-in-presets","title":"More delightful built-in presets","text":"<ul> <li>AirFlow specific support</li> <li>Scrappy specific support</li> <li><code>asyncio</code>-specific support</li> <li>First class support for Django, Celery</li> <li>DDTrace &amp; OpenTelemetry support</li> <li>Filters for normalization on OpenTelemetry standard attributes</li> <li>Provide helpers to have request-contextualized loggers for Django and FastAPI</li> <li>Provide helpers to have command-contextualized loggers for Click</li> <li>Provide helpers to have workload-contextualized loggers for Temporal</li> <li>MORE!</li> </ul>"},{"location":"ROADMAP/#improve-loggias-internal-quality","title":"Improve Loggia's internal quality","text":"<ul> <li>Auto-generate configuration docs using our decorators and a mkdocs plugin</li> <li>Move monkey patches else where into a custom LogRecordFactory and LoggerFactory</li> <li>All code shown in documentation is derived from the test suite</li> <li>Remove dependency on <code>pythonjsonlogger</code></li> <li>Ensure all dependencies are strictly optional - Loggia should bring no dependencies at all to respect our minimalist friends' sensibilities.</li> <li>Introduce a decent exception hierarchy - no more <code>RuntimeError</code></li> <li>Add tests for <code>loaderutils</code></li> <li>Add tests for the pretty formatter</li> <li>Make environment variable parsing type aware and document it</li> </ul>"},{"location":"config/","title":"Configuring the logger","text":"<p>Almost all configurations can and should be passed through environment variables, to follow the 12-factor app principles.</p>"},{"location":"config/#common-environment-variables","title":"Common Environment variables","text":"Variable name(s) From Python Default value Description <code>LOGGIA_LEVEL</code> <code>set_general_level</code> <code>INFO</code> The log level number or name. <code>LOGGIA_SUB_LEVEL</code> <code>set_logger_level</code> <code>INFO</code> The log level number or name for any given named logger. <code>LOGGIA_PRESETS</code> only during LoggerConfiguration construction <code>prod</code> Preferences for Loggia Presets"},{"location":"config/#advanced-environment-variables","title":"Advanced Environment variables","text":"<p>These variables are not commonly modified, and changing them requires a good understanding of Loggia's internals --- at least while the documentation remains sparse.</p> Variable name(s) From Python Default value Description <code>LOGGIA_FORMATTER</code> <code>set_default_formatter</code> (unset) The fully qualified name of a logging.Formatter - see loggia.stdlib_formatters for available options. <code>LOGGIA_SET_EXCEPTHOOK</code> <code>set_excepthook</code> (unset) Whether the logger should set the sys.excepthook. <code>LOGGIA_SET_UNRAISABLEHOOK</code> <code>set_unraisablehook</code> (unset) Whether the logger should set the sys.unraisablehook. <code>LOGGIA_SET_THREADING_EXCEPTHOOK</code> <code>set_threading_excepthook</code> (unset) Whether the logger should set the threading.excepthook. <code>LOGGIA_CAPTURE_WARNINGS</code> <code>set_capture_warnings</code> (unset) Whether the logger should capture warnings from the warnings module. <code>LOGGIA_CAPTURE_LOGURU</code> <code>set_loguru_capture</code> (unset) Whether the logger should capture logs emitted through loguru. <code>LOGGIA_EXTRA_FILTERS</code> <code>add_log_filter</code> (unset) <code>LOGGIA_DISALLOW_LOGURU_RECONFIG</code> <code>set_loguru_reconfiguration_block</code> (unset) Explicitely allow loguru to be reconfigured. <code>LOGGIA_SUB_PROPAGATION</code> <code>set_logger_propagation</code> (unset)"},{"location":"config/#environment-variable-parsers","title":"Environment variable parsers","text":"<p>Note</p> <p>For boolean values coming from the environment, most values are truthy, and a few values are falsy: <code>FALSE</code>, <code>0</code>, <code>F</code>, <code>NO</code> and <code>DISABLED</code> will be interpreted as <code>False</code>.</p> <p>The falsy values are case-insentive, i.e. <code>disabled</code> is also <code>False</code>.</p> <p>Warning</p> <p>This library will not load <code>.env</code> files for you.</p> <p>You are responsible for loading them yourself, using <code>source .env</code> or your favorite library. Possible libraries are python-dotenv or python-decouple to load your <code>.env</code> files.</p>"},{"location":"config/#configuration-precedence","title":"Configuration precedence","text":"<p>Loggia is configured through four different ways (see how), each overriding the previous one.</p> <pre><code>\nstateDiagram-v2\ndefaults : Loggia default dictconfig\npresets: Presets\nargs : LoggerConfiguration.__init__ API\nenv : Environment\ncalls : LoggerConfiguration API\n\n\ndefaults --&gt; presets\npresets --&gt; args\nargs --&gt; env\nenv --&gt; calls</code></pre> <ol> <li>The static base configuration. NB: We go with only one handler to stdout in true cloud-native fashion.</li> <li>Presets are loaded according to preferences (see Presets)</li> <li>Options passed to the <code>LoggerConfiguration</code> constructor override the above (if any)</li> <li>Environment variables override the above (if any)</li> <li>Methods called on a <code>LoggerConfiguration</code> instance in Python have the last word.</li> </ol>"},{"location":"presets/","title":"Loggia Presets","text":"<p>Loggia bundles a bunch of delightful presets for many parts of the Python ecosystem.</p> <p>It's actually its raison d'\u00eatre : bundling configuration is arguably what differentiates Loggia from most other loggers. We're not a logger, we're a logger distribution of sorts.</p> <p>Presets can configure any part of the logger in any way possible. We do not shy away from monkey patches when they bring valuable functionality, and we strive to have the best configuration possible in a one-size-fits-all spirit.</p>"},{"location":"presets/#loaded-presets","title":"Loaded presets","text":"<p>Loggia loads all the presets in <code>loggia.presets</code> by default.</p> <p>Presets that may conflict with each other are handled through \"preset slots\", as described below.</p> <p>Note</p> <p>The ROADMAP includes an item where we plan on conditionally loading presets using some form of feature detection.</p>"},{"location":"presets/#preset-slots","title":"Preset Slots","text":"<p>A Loggia preset may have one or more <code>slots</code> defined. What is a <code>slot</code>? A way to express a concern where only one preset may apply.</p> <p>For instance, the <code>main</code> slot currently has a <code>prod</code> and a <code>dev</code> preset, that configure structured and pretty output formats, respectively.</p> Slot Available implementations <code>main</code> <code>dev</code> ; <code>prod</code> <code>normalization</code> <code>datadog</code> ; <code>otel</code> ; <code>concise</code> (in ROADMAP)"},{"location":"presets/#preset-preferences","title":"Preset Preferences","text":"<p>When multiple presets are available for a given slot, something needs to decide which preset to use. This is controlled by the <code>LOGGIA_PRESETS</code> environment variable, as well as the <code>presets</code> argument to the LoggerConfiguration constructor.</p> <p>It is expected to be a comma separated string of preset names, identifying which preset wins for each of the slots.</p> <p>The default <code>LOGGIA_PRESETS</code> value is <code>\"prod\"</code>. This means you have to opt in to pretty formatting (by doing something like <code>export LOGGIA_PRESETS=dev</code>). This make most loggia-enabled projects \"production-ready\" by default, as far as logging is concerned.</p> <p>Loggia will figure out which preset belongs to which slot: conflicting or confusing slot to preset mappings are unsupported/forbidden. This could be revisited before 1.0.</p>"},{"location":"presets/#writing-and-contributing-presets","title":"Writing and contributing presets","text":"<p>If you happen to reuse Loggia configuration code or have identical environment variables across several deployments, we recommend you try writing a preset instead.</p> <p>Pending a better tutorial, look at the packages in the <code>loggia.presets</code> namespace for inspiration. In most instances, you can cut and paste your Loggia configuration code in an <code>apply</code>method and be done with it.</p> <p>Note</p> <p>The ROADMAP includes several tasks where we plan on expanding / reworking this side. We notably intend to clarify how to ship presets, add more pythonic ways of registering new presets, and provide a mechanism for conditional activation beyond preset-preset dependencies.</p>"},{"location":"presets/#registering-your-new-preset","title":"Registering your new preset","text":"<p>Adding the fully qualified name of your preset (i.e. <code>\"mypackage.mysubpackage.MyPreset\"</code>) to <code>LOGGIA_PRESETS</code> is enough for Loggia to load it.</p> <p>Alternatively, if you are using the constructor parameter, you'll be happy to find out it accepts a <code>list[str|BasePreset]</code> for preset preferences, enabling your to directly register the type.</p>"},{"location":"presets/#declaring-a-preset-preset-dependency","title":"Declaring a preset-preset dependency","text":"<p>If your preset should be enabled depending on whether or not another preset is activating, you may override the <code>BasePreset.required_presets()</code> class method to indicate which presets you depend on.</p> <p>For instance, an hypothetic <code>AddProductionFields</code> would likely depend on the <code>prod</code> preset. This is meant to allow extending the builtins without requiring overrides.</p> <p>Note</p> <p>New in version 0.3.0</p>"},{"location":"presets/#overriding-built-in-presets","title":"Overriding built-in presets","text":"<p>You may also opt to inherit from one of the base presets, like perhaps the <code>Dev</code> one. This new slotted preset will be picked up automatically after setting <code>LOGGIA_PRESETS</code>.</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#loggia.logger","title":"loggia.logger","text":"<p>Main module for logging configuration, using standard logging.</p>"},{"location":"reference/#loggia.logger.initialize","title":"loggia.logger.initialize","text":"<pre><code>initialize(\n    conf: LoggerConfiguration | dict[str, str] | None = None,\n    presets: str | list[str] | None = None,\n) -&gt; None\n</code></pre> <p>Initialize the logging system.</p> Source code in <code>loggia/logger.py</code> <pre><code>def initialize(conf: LoggerConfiguration | dict[str, str] | None = None, presets: str | list[str] | None = None) -&gt; None:\n    \"\"\"Initialize the logging system.\"\"\"\n    conf = _bootstrap_config(conf, presets)\n\n    if conf.setup_excepthook:\n        _set_excepthook(logging.getLogger())\n\n    if conf.setup_unraisablehook:\n        _set_unraisablehook(logging.getLogger())\n\n    if conf.setup_threading_excepthook:\n        _set_threading_excepthook(logging.getLogger())\n\n    # XXX asyncio bullshit?\n    # XXX audit subsystem bridge\n\n    if conf.capture_warnings:\n        # XXX test\n        logging.captureWarnings(capture=True)\n\n    if conf.capture_loguru in (FlexibleFlag.AUTO, FlexibleFlag.ENABLED):\n        try:\n            from loggia.loguru_sink import configure_loguru\n\n            _patch_to_add_level(5, \"TRACE\")\n            _patch_to_add_level(25, \"SUCCESS\")\n            configure_loguru(conf)\n        except ModuleNotFoundError as e:\n            if conf.capture_loguru == FlexibleFlag.ENABLED:\n                bootstrap_logger.error(\"Failed to configure loguru! Is is installed?\", e)\n\n    # XXX Check that logger levels exists\n    # BIM BAM BADABEEM BADABOOM, LOGGIA MAGICA!\n    logging.config.dictConfig(conf._dictconfig)\n</code></pre>"},{"location":"reference/#loggia.conf","title":"loggia.conf","text":""},{"location":"reference/#loggia.conf.LoggerConfiguration","title":"loggia.conf.LoggerConfiguration","text":"<pre><code>LoggerConfiguration(\n    *,\n    settings: dict[str, str] | None = None,\n    presets: str | list[str] | None = None\n)\n</code></pre> <p>Environment-aware configuration container for loggia.</p>"},{"location":"reference/#loggia.conf.LoggerConfiguration.add_log_filter","title":"loggia.conf.LoggerConfiguration.add_log_filter","text":"<pre><code>add_log_filter(\n    logger_name: str,\n    filter_: SupportsFilter | Callable[[logging.LogRecord], bool],\n) -&gt; None\n</code></pre> <p>Add a filter to a specific logger.</p> <p>Use the empty string as logger name to add a filter to the root logger.</p> <p>NB: Filters do not propagate like handlers do, see https://docs.python.org/3/library/logging.html#logging.Logger.propagate for more information.</p> <p>If you want the filter to propagate, set it on the handler rather than the logger with add_handler_filter</p>"},{"location":"reference/#loggia.conf.LoggerConfiguration.set_capture_warnings","title":"loggia.conf.LoggerConfiguration.set_capture_warnings","text":"<pre><code>set_capture_warnings(enabled: bool | str) -&gt; None\n</code></pre> <p>Explicitely enable the capture of warnings.</p> <p>When set to true, Loggia will attempt to log warnings.</p>"},{"location":"reference/#loggia.conf.LoggerConfiguration.set_default_formatter","title":"loggia.conf.LoggerConfiguration.set_default_formatter","text":"<pre><code>set_default_formatter(formatter: UserDefinedObject[logging.Formatter]) -&gt; None\n</code></pre> <p>Sets the default formatter.</p>"},{"location":"reference/#loggia.conf.LoggerConfiguration.set_excepthook","title":"loggia.conf.LoggerConfiguration.set_excepthook","text":"<pre><code>set_excepthook(enabled: bool | str) -&gt; None\n</code></pre> <p>Explicitely enable or disable setting sys.excepthook.</p> <p>When set to true, Loggia log unhandled exceptions as CRITICAL errors.</p>"},{"location":"reference/#loggia.conf.LoggerConfiguration.set_general_level","title":"loggia.conf.LoggerConfiguration.set_general_level","text":"<pre><code>set_general_level(level: int | str) -&gt; None\n</code></pre> <p>Set the general/root, or default, log level.</p> <p>Can be either a level name string or a level numder int.</p>"},{"location":"reference/#loggia.conf.LoggerConfiguration.set_logger_level","title":"loggia.conf.LoggerConfiguration.set_logger_level","text":"<pre><code>set_logger_level(logger_name: str, level: int | str) -&gt; None\n</code></pre> <p>Set a specific log level for a specific logger.</p> <p>This allows you to fine tune verbosity according to your needs.</p>"},{"location":"reference/#loggia.conf.LoggerConfiguration.set_logger_propagation","title":"loggia.conf.LoggerConfiguration.set_logger_propagation","text":"<pre><code>set_logger_propagation(logger_name: str, does_propagate: str) -&gt; None\n</code></pre> <p>Set a specific logger's propagation.</p>"},{"location":"reference/#loggia.conf.LoggerConfiguration.set_loguru_capture","title":"loggia.conf.LoggerConfiguration.set_loguru_capture","text":"<pre><code>set_loguru_capture(enabled: FlexibleFlag | bool | str) -&gt; None\n</code></pre> <p>Explicitely disable Loggia-Loguru interop.</p> <p>When set to AUTO, Loggia will attempt to configure Loguru if possible, and be silent if it's not possible.</p> <p>When set to ENABLED, Loggia will attempt to configure Loguru, and will produce an error if it is not importable.</p> <p>When set to DISABLED, Loggia will not attempt to configure Loguru even if it is present.</p>"},{"location":"reference/#loggia.conf.LoggerConfiguration.set_loguru_reconfiguration_block","title":"loggia.conf.LoggerConfiguration.set_loguru_reconfiguration_block","text":"<pre><code>set_loguru_reconfiguration_block(enabled: bool | str) -&gt; None\n</code></pre> <p>Explicitely allow loguru to be reconfigured.</p> <p>Loggia may hack Loguru to prevent other systems to overwrite the interop. This allows early detection of problems arising from conflicting configurations. Generally speaking, Loggia does not support or test against any Loguru customizations. You may have to use this setting if your software fails to initialize.</p>"},{"location":"reference/#loggia.conf.LoggerConfiguration.set_threading_excepthook","title":"loggia.conf.LoggerConfiguration.set_threading_excepthook","text":"<pre><code>set_threading_excepthook(enabled: bool | str) -&gt; None\n</code></pre> <p>Explicitely enable or disable setting threading.excepthook.</p> <p>When set to true, Loggia will log uncaught exception in threads as CRITICAL errors.</p>"},{"location":"reference/#loggia.conf.LoggerConfiguration.set_unraisablehook","title":"loggia.conf.LoggerConfiguration.set_unraisablehook","text":"<pre><code>set_unraisablehook(enabled: bool | str) -&gt; None\n</code></pre> <p>Explicitely enable or disable setting sys.unraisablehook.</p> <p>When set to true, Loggia will log unraisable exceptions as CRITICAL errors. Unraisable exceptions are unusual, and may happen i.e. during finalization or garbage collection.</p>"},{"location":"reference/#loggia.stdlib_formatters","title":"loggia.stdlib_formatters","text":"<p>Formatters for standard-lib logging.</p>"},{"location":"reference/#loggia.stdlib_formatters.json_formatter","title":"loggia.stdlib_formatters.json_formatter","text":""},{"location":"reference/#loggia.stdlib_formatters.json_formatter.CustomJsonEncoder","title":"loggia.stdlib_formatters.json_formatter.CustomJsonEncoder","text":"<p>               Bases: <code>JsonEncoder</code></p> <p>Custom JSON encoder, handling some extra types like UUID or socket.</p>"},{"location":"reference/#loggia.stdlib_formatters.json_formatter.CustomJsonFormatter","title":"loggia.stdlib_formatters.json_formatter.CustomJsonFormatter","text":"<pre><code>CustomJsonFormatter(*args: Any, **kwargs: Any)\n</code></pre> <p>               Bases: <code>JsonFormatter</code></p> <p>Custom JSON formatter for Loggia.</p>"},{"location":"reference/#loggia.stdlib_formatters.json_formatter.JsonSerializable","title":"loggia.stdlib_formatters.json_formatter.JsonSerializable","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for any object willing to cooperate with our CustomJsonEncoder.</p>"},{"location":"reference/#loggia.stdlib_formatters.pretty_formatter","title":"loggia.stdlib_formatters.pretty_formatter","text":""},{"location":"reference/#loggia.stdlib_formatters.pretty_formatter.PrettyFormatter","title":"loggia.stdlib_formatters.pretty_formatter.PrettyFormatter","text":"<pre><code>PrettyFormatter(*args: Any, **kwargs: Any)\n</code></pre> <p>               Bases: <code>Formatter</code></p> <p>A custom formatter for logging that uses colors.</p>"},{"location":"reference/#loggia.presets","title":"loggia.presets","text":""},{"location":"reference/#loggia.presets.datadog_normalisation","title":"loggia.presets.datadog_normalisation","text":"<p>Remap anything to Datadog standard and common attributes.</p>"},{"location":"reference/#loggia.presets.dev","title":"loggia.presets.dev","text":"<p>Dev is the overarching preset for a delightful development experience.</p>"},{"location":"reference/#loggia.presets.gunicorn","title":"loggia.presets.gunicorn","text":"<p>Logging presets for Gunicorn.</p>"},{"location":"reference/#loggia.presets.hypercorn","title":"loggia.presets.hypercorn","text":"<p>Logging presets for Hypercorn.</p>"},{"location":"reference/#loggia.presets.null_preset","title":"loggia.presets.null_preset","text":"<p>The null preset does nothing.</p> <p>Use this preset as an easy to cut and paste template to write you own. This preset changes strictly nothing.</p>"},{"location":"reference/#loggia.presets.prod","title":"loggia.presets.prod","text":"<p>An overarching preset for a no-frills JSON production logger to stdout.</p>"},{"location":"reference/#loggia.base_preset","title":"loggia.base_preset","text":""},{"location":"reference/#loggia.base_preset.BasePreset","title":"loggia.base_preset.BasePreset","text":"<p>Base class for Loggia Presets.</p> <p>Loggia presets are a very thin abstraction that allows bundling of settings that address a similar concern.</p>"},{"location":"reference/#loggia.base_preset.BasePreset.apply","title":"loggia.base_preset.BasePreset.apply  <code>abstractmethod</code>","text":"<pre><code>apply\n</code></pre> <p>The defining part of what the preset does by mutating conf as appropriate.</p>"},{"location":"reference/#loggia.base_preset.BasePreset.required_presets","title":"loggia.base_preset.BasePreset.required_presets  <code>classmethod</code>","text":"<pre><code>required_presets\n</code></pre> <p>Provides a mechanism for preset-&gt;preset dependencies.</p> <p>This is the primary mechanism to make a preset tied to the 'dev' or 'prod' presets without introducing a new slot.</p> The returned value is interpreted using the following rules <ul> <li>Single strings point to another's prefix name or preference key</li> <li>Sub-lists are also made of another's prefix name or preference key</li> <li>Sub-lists elements are implicit AND</li> <li>Main-list elements are implicit OR</li> </ul> <p>Examples:</p> <ul> <li>[\"dev\", \"prod\"]  # 'dev' OR 'prod' preset is activating</li> <li>[[\"prod\", \"datadog\"]]  # 'prod' AND 'datadog' is activating</li> <li>[\"dev\", [\"prod\", \"datadog\"]]  # 'dev' OR ('prod' AND 'datadog') are activating</li> </ul> <p>Presets disabling themselves because the clause doesn't match will result in a log at TRACE level in the bootstrap logger.</p> <p>NB: Requirements resolution happens after slot-selection and not before, unlike most dependency management solutions. This makes things simpler but less powerful.</p>"},{"location":"reference/#loggia.base_preset.BasePreset.slots","title":"loggia.base_preset.BasePreset.slots  <code>classmethod</code>","text":"<pre><code>slots\n</code></pre> <p>Override the slots method to indicate mutually incompatible presets.</p> <p>Mutually incompatible presets should have at least one slot in common. Slots have otherwise no use inside Loggia, but should roughly map to a single concern.</p>"},{"location":"reference/#loggia.constants.BASE_DICTCONFIG","title":"loggia.constants.BASE_DICTCONFIG  <code>module-attribute</code>","text":"<pre><code>BASE_DICTCONFIG: Final[_DictConfigArgs] = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"handlers\": {\n        \"default\": {\"class\": \"logging.StreamHandler\", \"formatter\": \"structured\"}\n    },\n    \"loggers\": {\n        \"\": {\"handlers\": [\"default\"], \"propagate\": True, \"level\": \"INFO\"}\n    },\n}\n</code></pre> <p>The base dictconfig for loggia.</p> <p>See standard logging.config.dictConfig for details about this.</p> <p>NB: We do not encourage you to modify the base dictconfig, but it is the ultimate escape hatch, where anything standard logging can do, you can do too. Remember anything put inside that dict has the lowest precedence over any kind of configuration in Loggia.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#a-quick-note-about-environment-variables","title":"A quick note about environment variables","text":"<p>The exemples showcase various environment variable settings with the <code>with_env(\"LOGGIA_ENV_VARIABLE\", \"value\")</code>. You are of course not encouraged to modify the environment at runtime, and instead to use the usual mechanisms, like <code>.env</code> files, CI variables, shell initialization files, Kubernetes settings or what have you.</p>"},{"location":"usage/#simplest-usage","title":"Simplest usage","text":"<pre><code># Setup\nfrom loggia.logger import initialize\n\n# One-line setup -- get the default config from environment variables\ninitialize()\n\n# Using the standard logger will now benefit from Loggia configuration\nimport logging\n\nlogger = logging.getLogger(__name__)\nlogger.info(\"Hello world!\")\n</code></pre> <p>With this setup, you get a default logger, with a default configuration. It supports JSON structured logging, and it is configured to work with DataDog. You can configure it using environment variables.</p>"},{"location":"usage/#use-with-loguru","title":"Use with Loguru","text":"<p>Note</p> <p>You do not have to use Loguru --- but if you already adopted it, Loggia will configure it to interop with Python's standard logging library.</p> <p>This library will automatically add to new log levels to match Loguru configuration:</p> <ul> <li><code>TRACE</code> (level 5)</li> <li><code>SUCCESS</code> (level 25)</li> </ul> <pre><code>...\n\n# Setup\nfrom loggia.logger import initialize\n\ninitialize()\n\n# Use loguru\nimport loguru\n\nloguru.logger.info(\"Hello world loguru!\")\n\n# Using standard logger should still work uniformly\nimport logging\n\nlogger = logging.getLogger()\nlogger.info(\"Hello world std_lib!\")\n</code></pre> <p>You can opt out of this interop through the capture_loguru setting.</p> <p>Warning</p> <p>While we try to have the same log management for loguru and standard logging, there are some differences. Even in this example, you can notice the name of the loggers is different.</p>"},{"location":"usage/#make-the-output-pretty-using-the-dev-preset","title":"Make the output pretty using the <code>dev</code> preset","text":"<pre><code># We're forcing the `dev` preset to fill the `main` slot\nwith_env(\"LOGGIA_PRESETS\", \"dev\")\n\nfrom loggia.logger import initialize\n\ninitialize()\n\nimport logging\n\nlogging.getLogger(\"test\").warning(\"hello from logging\", extra={\"with_extra\": \"100% yes!\"})  # Will show up colored\n</code></pre> <p>See the Presets documentation for more information.</p>"},{"location":"usage/#set-level-to-trace-using-the-api","title":"Set level to TRACE using the API","text":"<pre><code># Setup\n\nfrom loggia.conf import LoggerConfiguration\nfrom loggia.logger import initialize\n\n# Prepare a configuration\n# Here, debug_show_config will be ignored because it's not a boolean!\nlog_config = LoggerConfiguration()\nlog_config.set_general_level(5)  # This is the numerical level for 'TRACE'\n\ninitialize(log_config)\n\n# Use just like the standard logger\nimport logging\n\nlogger = logging.getLogger(__name__)\nlogger.info(\"Hello world!\")\nlogger.log(5, \"Hello trace\")  # Sending a trace with typings OK\nlogger.log(4, \"Hello? Hello?\")  # This will not show up\n</code></pre> <p>You probably want to configure the standard Python logger as well, e.g., to change the log level for some libraries.</p> <p>This is done using environment variables <code>LOGGIA_SUB_LEVEL</code>, or by using calling set_logger_level.</p> <pre><code># Setup\nfrom loggia.conf import LoggerConfiguration\nfrom loggia.logger import initialize\n\n# Force colored logging, even if environment variables is set\nlog_config = LoggerConfiguration(\n    settings={\n        \"LOGGIA_SUB_LEVEL\": \"test.warn_only:WARNING\",\n    },\n    presets=[\"dev\"],\n)\ninitialize(log_config)\n\n# Use just like the standard logger\nimport logging\n\nlogger = logging.getLogger(\"test\")\nlogger.info(\"Hello world first!\")\nlogger = logging.getLogger(\"test.warn_only\")\nlogger.info(\"Hello world bis is not shown\")\nlogger.warning(\"Warning are shown\")\n</code></pre>"},{"location":"usage/#configure-the-standard-logger","title":"Configure the standard logger","text":"<p>Be careful, the handler is called default</p>"},{"location":"usage/#using-the-trace-level-from-the-standard-logger","title":"Using the TRACE level from the standard logger","text":"<p>To be compatible with loguru, and have similar levels to other loggers, we extended the standard logger to expose a trace level at priority 5.</p> <p>Warning</p> <p>You need to have loguru installed and the loguru capture enabled to use custom levels.</p> <pre><code>...\n\n# Assuming we want a very verbose logger\nimport os\n\nos.environ[\"LOGGIA_LEVEL\"] = \"TRACE\"\n\n# Setup\nfrom loggia.logger import initialize\n\ninitialize(conf={\"LOGGIA_CAPTURE_LOGURU\": \"True\"})\n\n# Use standard logger\nimport logging\n\nlogger = logging.getLogger()\n\n# Use the added trace level\nlogger.log(level=5, msg=\"Hello trace from the std_lib!\")\n</code></pre>"},{"location":"developpers/contributing/","title":"Contributing","text":""},{"location":"developpers/contributing/#contribute-to-loggia","title":"Contribute to Loggia","text":""},{"location":"developpers/contributing/#foreword","title":"Foreword","text":"<p>First off, thank you for taking the time to contribute!</p> <p>It's worth mentioning that the purpose of this document is to provide you with a set of general guidelines and not strict rules: nothing is set in stone and we welcome contributions about these contributing guidelines as well :-)</p>"},{"location":"developpers/contributing/#tldr","title":"TL;DR","text":"<p>We want to make contributing straightforward and easy for everyone. As such and unless otherwise stated, we will use the traditional GitHub fork and pull workflow: any commit must be made to a feature/topic branch in a local fork and submitted via a pull request before it can be merged. If you are familiar with GitHub (and Git), branching and opening a pull request or an issue... then you should be able to start contributing right away.</p> <p>It is strongly advised to contact the project owner(s) before working on implementing a new feature or making any kind of large code refactoring.</p> <p>Contributors must agree to the following:</p> <ul> <li>material without explicit copyright assignment will be assigned to ManoMano</li> <li>apart from a few identified exceptions, material must be licensed under the ISC license; in all cases, a license is mandatory.</li> </ul>"},{"location":"developpers/contributing/#tooling","title":"Tooling","text":"<p>We recommended that you use pdm to manage your Python development environment.</p> <p>You can check the list of available developers commands with <code>pdm run --list</code></p>"},{"location":"developpers/contributing/#coding-style","title":"Coding style","text":"<p>Follow the project's conventions and tooling.</p> <p>Contact the contributors if you need help with tooling.</p> <p>Run the linter locally with <code>pdm run lint</code> and the formatters with <code>pdm run fmt</code></p>"},{"location":"developpers/contributing/#documentation","title":"Documentation","text":"<p>We consider documentation as important as code. Substantial contribution must always come with exhaustive documentation.</p> <p>Run the documentation locally with <code>pdm run docs-serve</code></p>"},{"location":"developpers/contributing/#tests","title":"Tests","text":"<p>Application and contributions should be tested and push for the highest quality standard.</p> <p>Run the tests locally with <code>pdm run test</code> or <code>pdm run test-cov</code></p> <p>There is a <code>tox</code> configuration to run the tests against all supported Python versions, and with different packages installed.</p>"},{"location":"developpers/contributing/#git","title":"Git","text":"<p>Make sure you have a GitHub account. The main branch should be considered as the production/deploy branch.</p>"},{"location":"developpers/contributing/#workflow","title":"Workflow","text":"<p>Extensive information can be found in this excellent forking workflow tutorial.</p> <p>In a nutshell:</p> <ol> <li> <p>Fork the repository and clone it locally.\u00a0\u00a0</p> <pre><code>git clone https://github.com/${USERNAME}/${REPONAME}\ncd ${REPONAME}\n</code></pre> </li> <li> <p>Create a topic branch where changes will be done.</p> <pre><code>git checkout -b ${TOPIC_BRANCH}\n</code></pre> </li> <li> <p>Commit the changes in logical and incremental chunks and use interactive rebase when needed.</p> <p>In your commit message, make sure to:</p> <p>- use the present tense   - use the imperative mood   - limit the first line to 72 characters   - reference any associated issues and/or PRs (if applicable)</p> <pre><code>git commit -am 'Add new feature...'\n</code></pre> </li> <li> <p>Push the topic branch to the remote forked repository.</p> <pre><code>git push origin ${TOPIC_BRANCH}\n</code></pre> </li> <li> <p>Open a Pull request to the upstream repository with a clear title and description.</p> </li> <li> <p>Once the PR has been merged, the topic branch can be removed from the local fork.</p> <pre><code>git branch -d ${TOPIC_BRANCH}\ngit push origin --delete ${TOPIC_BRANCH}\n</code></pre> </li> </ol>"},{"location":"developpers/contributing/#syncing-a-fork-with-its-upstream","title":"Syncing a fork with its upstream","text":"<p>This is used to keep a local fork up-to-date with the original upstream repository.</p> <ol> <li> <p>Connect the local to the original upstream repository.</p> <pre><code>git remote add upstream https://github.com/${USERNAME}/${REPONAME}\n</code></pre> </li> <li> <p>Checkout, fetch and merge the upstream master branch to the local one.</p> <pre><code>git checkout main\ngit fetch upstream\ngit merge upstream/master\n</code></pre> </li> <li> <p>Push changes to update to remote forked repository.</p> <pre><code>git push\n</code></pre> </li> </ol> <p>See GitHub help for more information.</p>"},{"location":"developpers/contributing/#issues","title":"Issues","text":"<p>If you find a bug that you don't know how to fix, please create an issue:</p> <ul> <li>use a clear and descriptive title</li> <li>give a step by step explanation on how to reproduce the problem</li> <li>include as many details as possible, even ones that may seem irrelevant; gists are a good way to include large amount of context and information</li> <li>describe what was already tried to fix the problem</li> </ul> <p>This document is adapted from ManoMano Guidelines</p>"}]}