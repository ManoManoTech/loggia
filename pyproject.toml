[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "loggia"
description = "A convenient logging configuration manager for Python's standard logging library and Loguru."
authors = [
  { name = "Gabriel Dugny", email = "gabriel.dugny@manomano.com" },
  { name = "Elie Bleton", email = "elie.bleton@manomano.com" },
  { name = "Jonathan Gallon", email = "jonathan.gallon@manomano.com" },
]
dependencies = [
    "python-json-logger>=2.0.7",
    "typing-extensions>=4.7.1 ; python_version < '3.10'",
]
requires-python = ">=3.9"
readme = "README.md"
license = { file = "LICENSE" }
dynamic = ["version"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: ISC License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Typing :: Typed",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: System :: Logging",
  "Topic :: Utilities",
  "Operating System :: OS Independent",
  "Environment :: Console",
  "Environment :: Web Environment",
]
[project.urls]
***REMOVED***

[project.optional-dependencies]
loguru = ["loguru>=0.7.0"]
rich = ["rich>=13.3.4"]
ddtrace = ["ddtrace>=1.18.0"]

[tool.pdm]
plugins = [
    "sync-pre-commit-lock"
]
[tool.build.build]
include = ["loggia"]
exclude = ["**/.*", ".*", ".mypy_cache"]

[tool.pdm.version]
source = "scm"
write_to = "loggia/_version.py"
write_template = "__version__: str = \"{}\"\n"

# Common settings for all scripts
[tool.pdm.scripts._]
env_file = ".env"

[tool.pdm.scripts]
# Lint
lint-pylint = { cmd = "pylint loggia", help = "Run pylint" }
lint-mypy = { shell = "mypy", help = "Run mypy type checker" }
lint-ruff = { cmd = "ruff .", help = "Run ruff linter" }
lint = { composite = [
  "lint-ruff",
  "lint-pylint",
  "lint-mypy",
], help = "Run all linters (ruff, pylint, mypy)." }
# Format
fmt-black = { cmd = "black .", help = "Run black formatter" }
fmt-ruff = { cmd = "ruff . --fix --select I001", help = "Run isort-like import sorting with ruff" }
fmt = { composite = [
  "fmt-black",
  "fmt-ruff",
], help = "Run all formatters (black, isort-like ruff)" }
# Tests
test = { cmd = "pytest", help = "Run the tests" }
test-cov = { cmd = "pytest --junitxml=pytest-report.xml --cov --cov-report xml:pytest-coverage.xml --cov-fail-under=0 --cov-report html", help = "Run the tests with coverage, and generate reports" }
# Docs
docs-serve = { cmd = "mkdocs serve", help = "Serve the docs locally" }
docs-build = { cmd = "mkdocs build --strict", help = "Build the docs" }


[tool.pdm.dev-dependencies]
dev = [
    "black>=22.12.0",
    "mypy>=1.4",
    "pylint>=2.15.8",
    "pytest-cov>=4.0.0",
    "yamllint>=1.28.0",
    "ipdb>=0.13.13",
    "rich>=13.3.4",
    "gunicorn>=20.1.0",
    "hypercorn>=0.14.3",
    "ruff>=0.0.262",
    "tox>=4.11.1",
    "tox-pdm>=0.6.1",
]
tests = [
    "pytest>=7.2.0",
    "pytest-mock>=3.10.0",
    "pytest-random-order>=1.1.0",
]
doc = [
    "mkdocs>=1.4.2",
    "mkdocs-material>=8.5.11",
    "mkdocs-git-revision-date-plugin>=0.3.2",
    "mkdocs-include-markdown-plugin>=6.0.0",
    "mkdocstrings[python]>=0.19.1",
    "mkdocs-section-index>=0.3.4",
    "mdx-truly-sane-lists>=1.3",
    "mike>=1.1.2",
]
debug = ["check-wheel-contents>=0.4.0"]

[[tool.pdm.source]]
url = "https://pypi.org/simple"
verify_ssl = true
name = "pypi"
include_packages = ["*"]

[tool.pytest]
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --pdbcls=IPython.terminal.debugger:Pdb"
testpaths = ["tests"]
pythonpath = [
  "."
]

[tool.coverage]
[tool.coverage.run]
branch = true
parallel = true
omit = ["tests/*", "__pypackages__/*", ".venv/*"]
source = ["loggia"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "def __repr__",
  "if TYPE_CHECKING:",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  'class .*\bProtocol\):',
  '@(abc\.)?abstractmethod]',
]

[tool.black]
line-length = 140
target-version = ['py39']

[tool.pylint]
[tool.pylint.MASTER]
py-version = "3.9"
ignore = ['__pypackages__', '.git', 'packages', '.venv']


[tool.pylint.FORMAT]
max-line-length = 180
[tool.pylint.'MESSAGES CONTROL']
disable = [
  "C",
  "R0903",
  "R1735",
  "W0511",
  "W0212",
  "too-many-instance-attributes",
  "too-many-branches",
]

[tool.ruff]
line-length = 140
target-version = "py39"
ignore = [
  "E501",   # Line too long
  "ANN101", # Missing type annotation for self in method
  "ANN102", # Missing type annotation for cls in classmethod
  "ANN401", # Dynamically typed expressions are disallowed
  "ARG002", # Unused argument
  "ARG005", # Unused lambda argument
  "ERA001", # XXX Enable later, commented code
  "TD",
  "SLF001", # Private member accessed
  "EM102",  # Exception must not use an f-string literal, assign to variable first
  "C408",   # Unnecessary `dict` call (rewrite as a literal)
  "D100",   # Missing docstring in public module

  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D104", # Missing docstring in public package
  "D105", # Missing docstring in magic method

  "D107",   # Missing docstring in `__init__`
  "SIM105", # Use `contextlib.suppress(X)` instead of `try`-`except`-`pass`
  "EM101",  # Exception must not use a string literal, assign to variable first
  "TRY",    # Avoid specifying long messages outside the exception class
  "FIX003", # Line contains XXX
  "N817",   # CamelCase `XxXx` imported as acronym `XX`
  "N813",   # CamelCase `XxXx` imported as lowercase `xxxx`
  "ICN003", # Members of `datetime` should not be imported explicitely
]
select = ["ALL"]
[tool.ruff.pydocstyle]
convention = "google"
[tool.ruff.flake8-annotations]
allow-star-arg-any = true
mypy-init-return = true
suppress-dummy-args = true
suppress-none-returning = true
[tool.ruff.flake8-unused-arguments]
ignore-variadic-names = true
[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"
[tool.ruff.flake8-errmsg]
max-string-length = 20
[tool.ruff.flake8-import-conventions]
# Declare the banned `from` imports.
banned-from = [
  "datetime",
  "os",
  "sys",
  "logging",
  "time",
  "re",
]
[tool.ruff.flake8-builtins]
builtins-ignorelist = ["filter", "format"]
[tool.ruff.per-file-ignores]
"tests/fixtures/**/*.py" = ["E402"]
"tests/**/*.py" = [
  "S101",
  "D",
  "ANN",
  "B018",
  "TRY",
  "EM",
  "N802",
  "INP001",
  "ARG",
  "PLR2004",
]
"loggia/presets/*.py" = ["D101"]

[tool.mypy]
files = ["loggia"]
python_version = "3.9"
strict = true
strict_optional = true
mypy_path = "$MYPY_CONFIG_FILE_DIR/stubs"
allow_redefinition = false
ignore_missing_imports = true
local_partial_types = true
no_implicit_optional = true
warn_unreachable = true
warn_no_return = false
check_untyped_defs = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pyright]
include = ["src"]
exclude = ["**/__pycache__",]
reportMissingImports = true
reportMissingTypeStubs = false

pythonVersion = "3.9"
